name: Main Flow

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Main - Build, Test, Version And Publish
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        server-id: ossrh
        server-username: ${{ secrets.OSSRH_USERNAME }}
        server-password: ${{ secrets.OSSRH_PASSWORD }}
        gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
        gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}


    - name: Build with Maven
      run: mvn package

    - name: Determine Version Change
      id: determine_version_change
      run: |
        # Extract the commit message of the latest commit on the main branch
        COMMIT_MSG=$(git log -1 --pretty=format:%s)
        if [[ "$COMMIT_MSG" =~ (BREAKING CHANGE:|major:|major!) ]]; then
        echo "version_change=major" 
        elif [[ "$COMMIT_MSG" =~ (feat:|feat!) ]]; then
        echo "version_change=minor"
        else
        echo "version_change=patch"
        fi >> $GITHUB_OUTPUT

    - name: Increment Version
      run: |
        echo "Version change: ${{steps.determine_version_change.outputs.version_change}}"
        
        version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        case "${{ steps.determine_version_change.outputs.version_change }}" in
        major) mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0 versions:commit ;;
        minor) mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0 versions:commit ;;
        *) mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit ;;
        esac
        
        git config --global user.email "$(git log -1 --pretty=format:'%ae')"
        git config --global user.name "$(git log -1 --pretty=format:'%an')"com
        git add .
        git commit -m "Updated version in pom.xml"
        git push
        echo "Updated version to: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

    - name: Create Git Tag
      run: |
        export version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Tagging with: v${version}"
        git config --global user.email "$(git log -1 --pretty=format:'%ae')"
        git config --global user.name "$(git log -1 --pretty=format:'%an')"
        git tag v${version}
        git push origin v${version}
        echo "Tagged: v${version}"

    - name: Publish to Maven
      run: | 
        mvn deploy -Prelease
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Remove GPG Key
      if: always()
      run: |
        echo "Listing secret keys:"
        gpg --list-secret-keys --with-colons

        echo "Listing public keys:"
        gpg --list-keys --with-colons

        echo "Deleting secret keys:"
        SECRET_KEYS=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/{print $5}')
        if [ -n "$SECRET_KEYS" ]; then
          for key in $SECRET_KEYS; do
            echo "Deleting secret key $key"
            gpg --batch --yes --delete-secret-keys "$key" || echo "Failed to delete secret key $key"
          done
        else
          echo "No secret keys found to delete."
        fi

        echo "Deleting public keys:"
        PUBLIC_KEYS=$(gpg --list-keys --with-colons | awk -F: '/^pub/{print $5}')
        if [ -n "$PUBLIC_KEYS" ]; then
          for key in $PUBLIC_KEYS; do
            echo "Deleting public key $key"
            gpg --batch --yes --delete-keys "$key" || echo "Failed to delete public key $key"
          done
        else
          echo "No public keys found to delete."
        fi

        echo "Cleaning up keyring and agents."
        gpgconf --kill all
        rm -rf ~/.gnupg
